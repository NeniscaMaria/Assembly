     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 3132333435363738            s1 db '12345678'
    14                                      lens1 equ $-s1
    15 00000008 00<rept>                    s2 times lens1 db 0
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                  ; Se da un sir de octeti S. Sa se construiasca sirul D astfel:
    21                                  ;sa se puna mai intai elementele de pe pozitiile pare din S iar
    22                                  ;apoi elementele de pe pozitiile impare din S. 
    23                                  ;Exemplu:
    24                                  ;S: 1, 2, 3, 4, 5, 6, 7, 8
    25                                  ;D: 1, 3, 5, 7, 2, 4, 6, 8
    26                                          ; we will solve the problem by considering BL the one that 'counts' the steps
    27                                          ;BL=0 for even steps//BL=1 for odd steps
    28                                          ;after each loop is performed, BL changes to 1 or 0 accordingly
    29 00000000 BE[00000000]                    mov ESI, s1;initialize ESI with offset of s1
    30 00000005 BF[08000000]                    mov EDI, s2;initialize EDI with the offset of s2
    31 0000000A B908000000                      mov ECX,lens1
    32 0000000F B301                            mov BL,1 ;1=odd, 0=even
    33 00000011 FC                              cld ;we parse the string from left to right 
    34                                          odd:
    35 00000012 80FB01                              cmp BL,1
    36 00000015 7C0A                                jl skipeven ;jump short if the step is even(BL=0)
    37 00000017 8A06                                mov AL,[ESI];;AL<-the byte from offset s1+ESI
    38 00000019 AA                                  stosb ;<=> mov EDI,AL(i.e. AL->the byte from the offset s1+ESI)
    39                                                    ; inc EDI
    40 0000001A 83C601                              add ESI,1
    41 0000001D B300                                mov BL,0
    42 0000001F E2F1                                loop odd
    43                                          skipeven:
    44 00000021 83C601                              add ESI,1
    45 00000024 B301                                mov BL,1
    46 00000026 E2EA                                loop odd
    47                                          
    48 00000028 BE[00000000]                    mov ESI,s1
    49 0000002D B900000000                      mov ECX,0
    50 00000032 B301                            mov BL,1
    51 00000034 FC                              cld
    52                                          even:
    53 00000035 80FB00                              cmp BL,0
    54 00000038 7F0E                                jg skipodd  ;jump short if step is odd(BL=1)
    55 0000003A 8A06                                mov AL,[ESI];;AL<-the byte from offset s1+ESI
    56 0000003C AA                                  stosb ;<=> mov EDI,AL(i.e. AL->the byte from the offset s1+ESI)
    57                                                    ; inc EDI
    58 0000003D 83C601                              add ESI,1
    59 00000040 B301                                mov BL,1
    60 00000042 41                                  inc ECX
    61 00000043 83F908                              cmp ECX,lens1
    62 00000046 72ED                                jb even
    63                                          skipodd:
    64 00000048 83C601                              add ESI,1 
    65 0000004B B300                                mov BL,0
    66 0000004D 41                                  inc ECX
    67 0000004E 83F908                              cmp ECX,lens1
    68 00000051 72E2                                jb even
    69                                                  
    70 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
