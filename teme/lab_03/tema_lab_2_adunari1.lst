     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 1
    14 00000001 0100                        b dw 1
    15 00000003 01000000                    c dd 1
    16 00000007 0100000000000000            d dq 1
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                  ;(d+d-b)+(c-a)+d unsigned
    21                                      start:
    22                                      ;FARA SEMN
    23 00000000 A1[07000000]                    mov EAX, DWORD[d] 
    24 00000005 8B15[0B000000]                  mov EDX, DWORD[d+4]
    25                                          ;EDX:EAX:=d=1
    26 0000000B 01C0                            add EAX,EAX
    27 0000000D 11D2                            adc EDX,EDX
    28                                          ;EDX:EAX:=EDX:EAX+EDX:EAX=d+d=2
    29 0000000F 668B1D[01000000]                mov BX, [b]
    30                                          ;convertim word la double word
    31 00000016 66B90000                        mov CX, 0    
    32 0000001A 6651                            push CX
    33 0000001C 6653                            push BX
    34 0000001E 5B                              pop EBX   ; acum b e dword, EBX:=b
    35 0000001F 29D8                            sub EAX, EBX 
    36 00000021 83DA00                          sbb EDX,0
    37                                          ;EDX:EAX:=EDX:EAX-EBX=d+d-b=2-1=1
    38 00000024 8B1D[03000000]                  mov EBX, DWORD[c] ;EBX:=c
    39 0000002A 8A0D[00000000]                  mov CL, [a] ;CL:=a
    40                                          ;convertim byte la word
    41 00000030 B500                            mov CH, 0
    42                                          ;convertm word la dword
    43 00000032 66BA0000                        mov DX, 0
    44 00000036 6652                            push DX
    45 00000038 6651                            push CX
    46 0000003A 59                              pop ECX ;ECX:=a
    47 0000003B 29CB                            sub EBX, ECX ;EBX:=EBX-ECX=c-a=1-1=0
    48 0000003D 01D8                            add EAX,EBX
    49 0000003F 83D200                          adc EDX,0
    50                                          ;EDX:EAX=EDX:EAX+EBX=(d+d-b)+(c-a)=1+0=1
    51 00000042 8B1D[07000000]                  mov EBX,DWORD[d]
    52 00000048 8B0D[0B000000]                  mov ECX,DWORD[d+4]
    53                                          ;ECX:EBX:=d
    54 0000004E 01D8                            add EAX,EBX
    55 00000050 11CA                            adc EDX,ECX
    56                                          ;EDX:EAX:=EDX:EAX+ECX:EBX=(d+d-b)+(c-a)+d=1+1=2
    57                                         
    58                                          
    59                                          
    60                                      
    61                                          ; exit(0)
    62 00000052 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 00000054 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
