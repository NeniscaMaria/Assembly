     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fprintf,printf,scanf,fopen,fclose              
     8                                  import exit msvcrt.dll 
     9                                  import fprintf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  import fopen msvcrt.dll
    13                                  import fclose msvcrt.dll  
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 61312E74787400              file_name db "a1.txt", 0
    18 00000007 7700                        acces_mode db "w", 0
    19 00000009 FFFFFFFF                    desc_file dd -1
    20 0000000D 6375763D00                  message db "cuv=",0
    21 00000012 257300                      format db "%s",0
    22 00000015 00                          cuv db 0
    23                                      
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ;Se da un nume de fisier (definit in segmentul de date). Sa se creeze un fisier cu numele dat,
    29                                          ;apoi sa se citeasca de la tastatura cuvinte si sa se scrie in fisier cuvintele citite pana cand 
    30                                          ;se citeste de la tastatura caracterul '$'.
    31                                          
    32                                          ; apelam fopen pentru a crea fisierul
    33                                          ; functia va returna in EAX descriptorul fisierului sau 0 in caz de eroare
    34                                          ; eax = fopen(file_name, acces_mode)
    35 00000000 68[07000000]                    push dword acces_mode     
    36 00000005 68[00000000]                    push dword file_name
    37 0000000A FF15[00000000]                  call [fopen]
    38 00000010 83C408                          add esp, 4*2                ; eliberam parametrii de pe stiva
    39 00000013 A3[09000000]                    mov [desc_file], eax   ; salvam valoarea returnata de fopen in variabila descriptor_fis
    40                                          ; verificam daca functia fopen a creat cu succes fisierul (daca EAX != 0)
    41 00000018 83F800                          cmp eax, 0
    42 0000001B 7469                            je final
    43                                          
    44                                          repeat:
    45                                              ;afisam mesajul pe ecran
    46 0000001D 68[0D000000]                        push dword message
    47 00000022 FF15[00000000]                      call[printf]
    48 00000028 83C404                              add esp,4*1
    49                                              
    50                                              ;citim cuvantul de la tastatura
    51 0000002B 68[15000000]                        push dword cuv 
    52 00000030 68[12000000]                        push dword format
    53 00000035 FF15[00000000]                      call[scanf]
    54 0000003B 83C408                              add esp,4*2
    55 0000003E A1[15000000]                        mov EAX,[cuv]
    56 00000043 83F824                              cmp EAX,'$'
    57 00000046 742F                                je finish
    58                                              
    59                                              ; scriem cuv in fisierul deschis folosind functia fprintf
    60                                              ; fprintf(desc_file, cuv)
    61 00000048 68[15000000]                        push dword cuv
    62 0000004D FF35[09000000]                      push dword [desc_file]
    63 00000053 FF15[00000000]                      call [fprintf]
    64                                              
    65                                              ;here we clear the memory from cuv 
    66 00000059 83C408                              add esp, 4*2
    67 0000005C B100                                mov CL,0
    68 0000005E BB00000000                          mov EBX,0
    69                                              clear: 
    70 00000063 888B[15000000]                          mov [cuv+EBX],CL
    71 00000069 43                                      inc EBX
    72 0000006A 8B83[15000000]                          mov EAX,[cuv+EBX]
    73 00000070 83F800                                  cmp EAX,0
    74 00000073 75EE                                    jne clear 
    75 00000075 EBA6                                jmp repeat
    76                                          finish:    
    77                                              ; apelam functia fclose pentru a inchide fisierul
    78                                              ; fclose(desc_file)
    79 00000077 FF35[09000000]                      push dword [desc_file]
    80 0000007D FF15[00000000]                      call [fclose]
    81 00000083 83C404                              add esp, 4
    82                                          
    83                                          final:
    84                                      
    85                                          ; exit(0)
    86 00000086 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    87 00000088 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
